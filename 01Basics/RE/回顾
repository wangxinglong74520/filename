正则表达式:
re模块
import re

re.match() 从开始查找 ,开始位置不符合直接返回Nono,只查找一次
re.search() 在整个字符串中查找,只查找一次
re.findall() 在整个字符串中查找,返回字符串中都符合的
re.sub(pattern,'新内容',str) 替换  新内容可以是函数

基础:
. 任意字符
[] 范围
| 或者
() 一组

量词:
    * >=0
    + >=1
    ? 0,1
    {m} =m
    {m,} >=m
    {m,n} 在m和n直接

预定义:
    \s 空格
    \S 非空格
    \d 数字
    \D 非数字
    \w 字母数字下划 [0-9a-zA-Z_]线
    \W  非字母数字下划线 [^0-9a-zA-Z_]
    \b 边界
分组:
    ()  group()   只有在匹配成功才可以使用
    number:
        引用:(\w+)(\d*) \1 \2 表示引用前面的内容
    name:(?P<name>\w+)  (?P=name)

Python里的数量词默认是贪婪,总是尝试匹配尽可能多的字符.
非贪婪则相反,总是匹配尽可能少的.











